<?xml version="1.0" encoding="UTF-8"?>

<project name="AgenDAV" default="dist">
    <!--
    <property file="build.properties" />
    -->

    <property name="agendav.docs.dir" value="doc" />
    <property name="sphinx.build" value="sphinx-build" />

    <!-- Cleans build/agendav-{current} directory -->
    <target name="clean-release" depends="init">
        <delete dir="build/agendav-${agendav.version}" includeemptydirs="1" />
    </target>

    <!-- Builds a new release -->
    <target name="dist" depends="init">
        <property name="build.dir" value="build/agendav-${agendav.version}" />
        <exec command="git checkout-index -a -f --prefix=${build.dir}/" checkreturn="1" />
        <phing dir="${build.dir}" target="prepare-release" haltonfailure="1" inheritAll="1" />
    </target>

    <!-- Prepares a new release. To be called from 'dist' target -->
    <target name="prepare-release">
        <fail 
            unless="agendav.version" 
            msg="Don't use this target directly! Use 'dist' instead" />

        <phingcall target="replace:version" />
        <phingcall target="docs" />
        <phingcall target="composer" />
        <!-- TODO: build *.js, *.css -->
    </target>

    <!-- Replaces @AGENDAV.VERSION@ with current version -->
    <target name="replace:version">
        <reflexive>
            <fileset dir="${agendav.docs.dir}">
            </fileset>
            <filterchain>
                <replacetokens begintoken="@" endtoken="@">
                    <token key="AGENDAV.VERSION" value="${agendav.version}" />
                </replacetokens>
            </filterchain>
        </reflexive>
    </target>

    <!-- Generates HTML documentation -->
    <target name="docs">
        <echo msg="Generating HTML documentation..." />
        <exec command="${sphinx.build} -b html -d ${agendav.docs.dir}/build/doctrees ${agendav.docs.dir}/source ${agendav.docs.dir}/html" />
        <echo msg="Documentation placed on ${agendav.docs.dir}/html" />
    </target>

    <!-- Downloads composer dependencies -->
    <target name="composer">
        <exec command="composer install" dir="web" checkreturn="1" />
    </target>

    <!-- Sets AgenDAV version -->
    <target name="init">
        <adhoc-task name="get:version"><![CDATA[

            class AgenDAV_VersionTask extends Task
            {
                public function main() {
                    include_once 'web/lib/AgenDAV/Version.php';

                    $this->getProject()->setNewProperty('agendav.version', \AgenDAV\Version::V);
                }
            }
        ]]></adhoc-task>
        <get:version />
        <echo msg="AgenDAV ${agendav.version}" />
    </target>
</project>
